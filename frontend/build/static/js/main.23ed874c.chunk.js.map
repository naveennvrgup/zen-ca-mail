{"version":3,"sources":["admin/auth/protected_route.js","App.js","serviceWorker.js","index.js"],"names":["protected_route","authorised","sessionStorage","componentWillMount","console","log","_this","props","history","push","react_default","a","createElement","this","component","Component","withRouter","Admin","React","lazy","__webpack_require__","e","then","bind","Main","Promise","all","Login","App","id","react","fallback","Switch","auth_protected_route","path","Route","rel","href","integrity","crossOrigin","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","BrowserRouter","src_App","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"4TAGMA,6MACFC,WAAaC,eAAc,QAE3BC,mBAAqB,WACjBC,QAAQC,MACHC,EAAKL,YACNK,EAAKC,MAAMC,QAAQC,KAAK,yFAK5B,OACIC,EAAAC,EAAAC,cAAA,WACKC,KAAKZ,YAAcS,EAAAC,EAAAC,cAAAC,KAAMN,MAAMO,UAAZ,cAbNC,aAmBfC,cAAWhB,GChBpBiB,EAAQC,IAAMC,KAAK,kBAAMC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,aACzBC,EAAON,IAAMC,KAAK,kBAAMM,QAAAC,IAAA,CAAAN,EAAAC,EAAA,GAAAD,EAAAC,EAAA,KAAAC,KAAAF,EAAAG,KAAA,aACxBI,EAAQT,IAAMC,KAAK,kBAAMM,QAAAC,IAAA,CAAAN,EAAAC,EAAA,GAAAD,EAAAC,EAAA,KAAAC,KAAAF,EAAAG,KAAA,aAoBhBK,mLAhBX,OACElB,EAAAC,EAAAC,cAAA,OAAKiB,GAAG,OACNnB,EAAAC,EAAAC,cAACkB,EAAA,SAAD,CAAUC,SAAUrB,EAAAC,EAAAC,cAAA,yBAElBF,EAAAC,EAAAC,cAACoB,EAAA,EAAD,KACEtB,EAAAC,EAAAC,cAACqB,EAAD,CAAgBC,KAAK,SAASpB,UAAWG,IACzCP,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CAAOD,KAAK,eAAepB,UAAWa,IACtCjB,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CAAOD,KAAK,IAAIpB,UAAWU,MAG/Bd,EAAAC,EAAAC,cAAA,QAAMwB,IAAI,aAAaC,KAAK,0DAA0DC,UAAU,0EAA0EC,YAAY,sBAZ5KxB,aCEZyB,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTzB,KAAK,SAAA8B,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfR,UAAUC,cAAcQ,YAI1BtD,QAAQC,IACN,gHAKE2C,GAAUA,EAAOW,UACnBX,EAAOW,SAASP,KAMlBhD,QAAQC,IAAI,sCAGR2C,GAAUA,EAAOY,WACnBZ,EAAOY,UAAUR,UAO5BS,MAAM,SAAAC,GACL1D,QAAQ0D,MAAM,4CAA6CA,kBCvFjEC,IAASC,OACLtD,EAAAC,EAAAC,cAACqD,EAAA,EAAD,KACIvD,EAAAC,EAAAC,cAACsD,EAAD,OAEFC,SAASC,eAAe,SDSvB,SAAkBpB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIoB,IAAIC,GAAwB5B,OAAOC,SAASN,MACpDkC,SAAW7B,OAAOC,SAAS4B,OAIvC,OAGF7B,OAAO8B,iBAAiB,OAAQ,WAC9B,IAAMzB,EAAK,GAAA0B,OAAMH,GAAN,sBAEP9B,GAgEV,SAAiCO,EAAOC,GAEtC0B,MAAM3B,GACHzB,KAAK,SAAAqD,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5C/B,UAAUC,cAAc+B,MAAM3D,KAAK,SAAA8B,GACjCA,EAAa8B,aAAa5D,KAAK,WAC7BoB,OAAOC,SAASwC,aAKpBrC,EAAgBC,EAAOC,KAG1Ba,MAAM,WACLzD,QAAQC,IACN,mEArFA+E,CAAwBrC,EAAOC,GAI/BC,UAAUC,cAAc+B,MAAM3D,KAAK,WACjClB,QAAQC,IACN,+GAMJyC,EAAgBC,EAAOC,MChC/BE","file":"static/js/main.23ed874c.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { withRouter } from 'react-router-dom'\n\nclass protected_route extends Component {\n    authorised = sessionStorage['token']\n\n    componentWillMount = () => {\n        console.log()\n        if (!this.authorised) {\n            this.props.history.push('/user_login/')\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                {this.authorised && <this.props.component />}\n            </div>\n        )\n    }\n}\n\nexport default withRouter(protected_route)","import React, { Component, Suspense } from 'react';\nimport { Route, Switch } from 'react-router-dom'\nimport './bootstrap/bootstrap.scss'\nimport './scss/app.scss'\nimport ProtectedRoute from './admin/auth/protected_route'\n\nconst Admin = React.lazy(() => import('./admin/admin'))\nconst Main = React.lazy(() => import('./main/main'))\nconst Login = React.lazy(() => import('./admin/auth/login'))\n\nclass App extends Component {\n  render() {\n    return (\n      <div id='app'>\n        <Suspense fallback={<div>loading..</div>}>\n\n          <Switch>\n            <ProtectedRoute path='/admin' component={Admin} />\n            <Route path='/user_login/' component={Login} />\n            <Route path='/' component={Main} />\n          </Switch>\n        </Suspense>\n        <link rel=\"stylesheet\" href=\"https://use.fontawesome.com/releases/v5.6.3/css/all.css\" integrity=\"sha384-UHRtZLI+pbxtHCWp1t77Bi1L4ZtiqrqD80Kn4Z8NTSRyMA2Fd33n5dQ8lWUE00s/\" crossOrigin=\"anonymous\"></link>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { BrowserRouter } from 'react-router-dom'\n\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}